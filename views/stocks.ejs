  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Stock Dashboard</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Boxicons -->
    <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet">
    <div class="container">
    <link rel="stylesheet" href="/css/dashboard.css">
    
  </head>
  <body>

    <!-- Header -->
    <%- include("partials/header") %>

    <%- include("partials/tickerWidget") %>

    <!-- Overview Section -->
      

    <div class="container-fluid py-3 mt-5">
      <div class="row">
        <!-- Sidebar: Stock Overview -->
        <div class="col-md-3">
          <h2 id="overviewTitle">Overview</h2>
          <div class="stock-list" id="stockList">
            <% if (stocks && stocks.length > 0) { %>
              <% stocks.forEach(stock => { %>
                <div class="stock-item">

                  <a href="/portfolio/<%= portfolioData.id %>/stock/<%= stock.ticker %>" 
                    class="text-light stock-link">
                    <span class="ticker"><%= stock.ticker %></span>
                  </a>
                                  
                  <span class="change <%= stock.percentageChange > 0 ? 'gain' : 'loss' %>">
                    <%= stock.percentageChange > 0 ? '+' : '' %><%= stock.percentageChange.toFixed(2) %>%
                  </span>
                </div>
              <% }) %>
            <% } else { %>
              <p>No stocks found in your portfolio.</p>
            <% } %>
          </div>
        </div>

        
      <!-- Charts -->
      <%- include("partials/charts") %>

      <!-- AI Chat Section -->
      <%- include("partials/ai") %>

      <!-- footer section -->
      <%- include("partials/footerNavigation") %>

      <!-- Add Stock Modal -->
      <div class="modal fade" id="addStockModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
          <div class="modal-content p-3">
            <h4 class="mb-3">Add New Stock</h4>
            <input type="text" id="newStockTicker" placeholder="Ticker Symbol" class="form-control mb-2">
            <input type="number" id="newStockAmount" placeholder="Amount" class="form-control mb-3">
            <div class="d-flex justify-content-between">
              <button class="btn btn-success" onclick="submitNewStock()">Submit</button>
              <button class="btn btn-secondary" onclick="closeAddStockModal()">Cancel</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- expand stock info modal  -->
     <div class="modal fade" id="stockModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark">
          <!-- content injected dynamically via fetch -->
        </div>
      </div>
    </div>

   
  

  <!-- Bootstrap JS bundle (with Popper) -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/dashboard.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    // Convert backend data into JS arrays
    const stocks = <%- JSON.stringify(stocks) %>;
    const portfolioHistory = <%- JSON.stringify(portfolioHistory) %>;
    const values = stocks.map(stock => stock.amount * stock.currStockPrice);

    // Pie chart for stock allocation (by amount of shares)
    const pieCtx = document.getElementById('pieChart').getContext('2d');
    new Chart(pieCtx, {
      type: 'pie',
      data: {
        labels: stocks.map(s => s.ticker),
        datasets: [{
          label: 'Share Allocation',
          data: stocks.map(s => s.amount),
          backgroundColor: ['#0d6efd','#4CAF50','#FF4136','#FFC107','#6610f2','#20c997']
        }]
      },
      options: { plugins: { legend: { labels: { color: '#fff' } } } }
    });

    // Second Pie Chart (value split)
    const valuePieCtx = document.getElementById('valuePieChart').getContext('2d');
    new Chart(valuePieCtx, {
      type: 'pie',
      data: {
        labels: stocks.map(s => s.ticker),
        datasets: [{
          label: 'Value Split',
          data: values,
          backgroundColor: ['#ff6384','#36a2eb','#ffce56','#4bc0c0','#9966ff','#ff9f40']
        }]
      },
      options: { plugins: { legend: { labels: { color: '#fff' } } } }
    });

    // Line chart for portfolio growth
    const lineCtx = document.getElementById('lineChart').getContext('2d');
    new Chart(lineCtx, {
      type: 'line',
      data: {
        labels: portfolioHistory.map(p => p.date),
        datasets: [{
          label: 'Portfolio Value',
          data: portfolioHistory.map(p => p.value),
          borderColor: '#0d6efd',
          backgroundColor: 'rgba(13,110,253,0.2)',
          fill: true,
          tension: 0.3
        }]
      },
      options: {
        plugins: { legend: { labels: { color: '#fff' } } },
        scales: {
          x: { ticks: { color: '#fff' }, grid: { color: '#333' } },
          y: { ticks: { color: '#fff' }, grid: { color: '#333' } }
        }
      }
    });

  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll('.stock-link').forEach(link => {
      link.addEventListener('click', async function (e) {
        e.preventDefault();

        const url   = this.href;
        const modal = document.getElementById('stockModal');

        // fetch the partial HTML
        const res  = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' }});
        const html = await res.text();

        // inject into the modal
        modal.querySelector('.modal-content').innerHTML = html;

        const bsModal = bootstrap.Modal.getOrCreateInstance(modal);
        bsModal.show();

        // init TradingView AFTER the modal becomes visible
        modal.addEventListener('shown.bs.modal', async () => {
          await ensureTradingViewLoaded();
          initTradingViewIn(modal);
        }, { once: true });
      });
    });
  });

  // load tv.js once
  function ensureTradingViewLoaded() {
    if (window.TradingView && window.TradingView.widget) return Promise.resolve();
    return new Promise((resolve, reject) => {
      const s = document.createElement('script');
      s.src = 'https://s3.tradingview.com/tv.js';
      s.async = true;
      s.onload = resolve;
      s.onerror = () => reject(new Error('Failed to load TradingView script'));
      document.head.appendChild(s);
    });
  }

  // find the container(s) inside the injected partial and build widgets
  function initTradingViewIn(root) {
    const containers = root.querySelectorAll('.tradingview-widget-container[id^="tradingview_"]');
    containers.forEach(el => {
      const containerId = el.id; // e.g. tradingview_AAPL
      const symbolRaw   = el.dataset.symbol || containerId.replace('tradingview_', '');

      // Add an exchange prefix if you need to be explicit (optional)
      const tvSymbol = symbolRaw.includes(':') ? symbolRaw : symbolRaw; // e.g. "NASDAQ:AAPL"

      // Create the widget
      /* global TradingView */
      new TradingView.widget({
        container_id: containerId,
        width: "100%",
        height: 400,
        symbol: tvSymbol,
        interval: "D",
        timezone: "Etc/UTC",
        theme: "dark",
        style: "1",
        locale: "en",
        hide_side_toolbar: false,
        allow_symbol_change: true
      });
    });
  }


    
  </script>
 

</body>
</html>
