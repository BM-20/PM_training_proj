<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Stock Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Bootstrap & Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css" rel="stylesheet">

  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/dashboard.css">
</head>
<body>
  <!-- Header -->
    <%- include("partials/header") %>

    <!-- ticker widget -->
    <%- include("partials/tickerWidget") %>
    

    <!-- manage user portfolios -->
    <%- include("partials/portfolioManager", { portfolios }) %>

    <h2>Overview</h2>

    <!-- Main Content: Carousel Charts -->
    <div class="row mt-4">
    <!-- Chart Carousel (left side) -->
    <div class="col-md-8">
      <div id="chartCarousel" class="carousel slide" data-bs-ride="carousel">
        <div class="carousel-inner">
          
          <!-- Pie Chart -->
          <div class="carousel-item active">
            <div class="card bg-dark text-white p-3">
              <h4>Portfolio Allocation</h4>
              <div class="chart-container">
                <canvas id="pieChart"></canvas>
              </div>
            </div>
          </div>

          <!-- Portfolio Value Split -->
          <div class="carousel-item">
            <div class="card bg-dark text-white p-3">
              <h4>Portfolio Value Split</h4>
              <div class="chart-container">
                <canvas id="valuePieChart"></canvas>
              </div>
            </div>
          </div>

          <!-- Line Chart -->
          <div class="carousel-item">
            <div class="card bg-dark text-white p-3">
              <h4>Portfolio Growth</h4>
              <canvas id="lineChart"></canvas>
            </div>
          </div>

        </div>

        <!-- Carousel Controls -->
        <button class="carousel-control-prev" type="button" data-bs-target="#chartCarousel" data-bs-slide="prev">
          <span class="carousel-control-prev-icon"></span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#chartCarousel" data-bs-slide="next">
          <span class="carousel-control-next-icon"></span>
        </button>
      </div>
    </div>

    <!-- Stats Card (right side) -->
  <div class="col-md-4">
    <div class="card bg-dark text-white p-3">
      <h4>Statistics</h4>
      <ul class="list-unstyled" id="statsList">
        <li><strong>Overall Portfolio Value:</strong> $<span id="netWorth"></span></li>
        <li><strong>Growth:</strong> <span id="growth"></span>%</li>
        <li><strong>Best Performer:</strong> <span id="bestPerformer" style="color: #28a745;"></span></li>
        <li><strong>Worst Performer:</strong> <span id="worstPerformer" style="color: #dc3545;"></span></li>
      </ul>
    </div>
  </div>


      
        <!-- Advisory / Disclaimer -->
      <!-- <div class="ai-disclaimer mt-3 p-3 rounded">
        <h6 class="text-warning mb-2">⚠️ Note</h6>
        <p class="mb-0">
          All stock values are calculated using the current market price at the time of purchase. Historical purchase prices are not retrieved due to API limitations.  

      </div> -->
      </div>
      
    </div>
    
  </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Injected from backend
  const totalPortfolioValue = <%- JSON.stringify(totalPortfolioValue) %>;
  const bestPortfolio = <%- JSON.stringify(bestPortfolio) %>;
  const worstPortfolio = <%- JSON.stringify(worstPortfolio) %>;
  const pieChartData = <%- JSON.stringify(pieChartData) %>;
  const lineChartData = <%- JSON.stringify(lineChartData) %>;

  // -------------------------------
  // Update Stats Section
  // -------------------------------
  document.getElementById("netWorth").innerText = totalPortfolioValue.toFixed(2);

  if (lineChartData.length > 1) {
    const firstVal = lineChartData[0].value;
    const lastVal = lineChartData[lineChartData.length - 1].value;
    const growth = ((lastVal - firstVal) / firstVal * 100).toFixed(2);
    document.getElementById("growth").innerText = growth;

  } else {
    document.getElementById("growth").innerText = "0";
  }

  document.getElementById("bestPerformer").innerText = bestPortfolio?.name || "N/A";
  document.getElementById("worstPerformer").innerText = worstPortfolio?.name || "N/A";

  // -------------------------------
  // Charts
  // -------------------------------
  // Prepare pie chart labels/values
  const pieLabels = pieChartData.map(p => p.name);
  const pieValues = pieChartData.map(p => p.value);

  // Pie Chart (Portfolio Allocation)
  const ctxPie = document.getElementById("pieChart").getContext("2d");
  new Chart(ctxPie, {
    type: "pie",
    data: {
      labels: pieLabels,
      datasets: [{
        data: pieValues,
        backgroundColor: ["#007bff", "#28a745", "#ffc107", "#dc3545", "#17a2b8"]
      }]
    }
  });

  // Value Pie Chart (Portfolio Value Split)
  const ctxValuePie = document.getElementById("valuePieChart").getContext("2d");
  new Chart(ctxValuePie, {
    type: "doughnut",
    data: {
      labels: pieLabels,
      datasets: [{
        data: pieValues,
        backgroundColor: ["#6610f2", "#fd7e14", "#20c997", "#6f42c1", "#e83e8c"]
      }]
    }
  });

  // Line Chart (Portfolio Growth)
  const lineLabels = lineChartData.map(d => d.date);
  const lineValues = lineChartData.map(d => d.value);

  const ctxLine = document.getElementById("lineChart").getContext("2d");
  new Chart(ctxLine, {
    type: "line",
    data: {
      labels: lineLabels,
      datasets: [{
        label: "Portfolio Value",
        data: lineValues,
        fill: false,
        borderColor: "#17a2b8",
        tension: 0.1
      }]
    }
  });
</script>

  

    
    
  <!-- Bootstrap JS bundle -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="/js/dashboard.js"></script>
  <script>
    let portfolioToDelete = null;

    function confirmDelete(evt, portfolioId, portfolioName) {
      // prevent card click
      evt.stopPropagation();
      portfolioToDelete = portfolioId;

      // update modal text
      document.getElementById('deleteMessage').textContent =
        `Are you sure you want to delete the portfolio "${portfolioName}"?`;

      const modalEl = document.getElementById('deletePortfolioModal');
      const bsModal = new bootstrap.Modal(modalEl);
      bsModal.show();
    }
    // when user confirms deletion
    document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
      if (!portfolioToDelete) return;

      try {
        const res = await fetch(`/portfolio/delete/${portfolioToDelete}`, { method: 'DELETE' });
        if (!res.ok) throw new Error('Delete failed');

        // remove the card from DOM with a tiny fade (optional)
        const card = document.querySelector(`.portfolio-card[data-portfolio-id="${portfolioToDelete}"]`);
        if (card) {
          const wrapper = card.closest('.col-md-4') || card;
          wrapper.style.transition = 'opacity .25s ease, transform .25s ease';
          wrapper.style.opacity = '0';
          wrapper.style.transform = 'scale(.98)';
          setTimeout(() => {
            wrapper.remove();
      
            location.reload();
          }, 260);
        } else {
    
          location.reload();
        }

        // hide modal
        document.querySelector('#deletePortfolioModal .btn-secondary').click();
      } catch (err) {
        console.error(err);
        alert('Failed to delete portfolio');
      } finally {
        portfolioToDelete = null;
      }
    });

  </script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  
  

</body>
</html>
