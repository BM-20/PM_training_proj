<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Login • Redfolio</title>
  <style>
    :root{
      --bg:#000000;
      --panel:#0b0b0b;
      --panel-2:#101010;
      --text:#f5f5f5;
      --muted:#b3b3b3;
      --red:#e11d48; /* red-600 vibe */
      --red-700:#be123c;
      --ring:rgba(225,29,72,.35);
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      background:var(--bg);
      color:var(--text);
      font:16px/1.45 system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,"Helvetica Neue",Arial,"Noto Sans",sans-serif;
      transition:background .3s ease, color .3s ease;
    }

    .wrapper{
      min-height:100dvh;
      display:grid;
      place-items:center;
      padding:16px;
    }

    /* Smaller, centered card panel */
    .panel{
      width:100%;
      max-width:420px;
      background:linear-gradient(180deg,var(--panel),var(--panel-2));
      border:1px solid #141414;
      border-radius:16px;
      padding:20px;
      box-shadow:0 20px 40px rgba(0,0,0,.45);
    }

    .panel__header{
      display:flex;
      align-items:center;
      justify-content:space-between;
      gap:12px;
    }

    .brand{margin:0; font-weight:700; letter-spacing:.2px; font-size:1.35rem}
    .brand-red{color:var(--red)}
    .sub{margin:.35rem 0 1.1rem; color:var(--muted); font-size:.95rem}

    .row.full{margin:12px 0}
    .input{
      background:#0f0f0f;
      border:1px solid #1b1b1b;
      border-radius:12px;
      padding:10px 12px;
    }
    .input--pw{position:relative; padding-right:84px}

    .input input{
      width:100%;
      background:transparent;
      color:var(--text);
      border:0;
      outline:0;
      font-size:1rem;
    }
    .input input::placeholder{color:#7a7a7a}

    label{display:block; margin:0 0 6px; font-size:.95rem}

    .input:focus-within{
      border-color:var(--red);
      box-shadow:0 0 0 4px var(--ring);
    }

    /* Buttons */
    .btn{
      border:1px solid #2a2a2a;
      background:#151515;
      color:var(--text);
      padding:10px 14px;
      border-radius:12px;
      cursor:pointer;
      font-weight:600;
      transition:transform .06s ease, background .2s ease, border-color .2s ease;
    }
    .btn:active{transform:translateY(1px)}

    .btn-primary{
      background:var(--red);
      border-color:var(--red);
      color:white;
    }
    .btn-primary:hover{background:var(--red-700); border-color:var(--red-700)}

    .btn-ghost{
      background:transparent;
      border-color:#2a2a2a;
      color:#e7e7e7;
    }
    .btn-ghost:hover{border-color:#3a3a3a}

    .btn-pill{
      border-radius:999px;
      padding:8px 12px;
      font-size:.9rem;
      background:#121212;
    }

    /* Toggle switch */
    .switch{
      display:inline-flex; width:38px; height:22px; border-radius:999px;
      background:#202020; border:1px solid #2a2a2a; vertical-align:middle; position:relative;
    }
    .switch>span{
      position:absolute; left:2px; top:2px; width:18px; height:18px; border-radius:999px; background:#fff; transition:transform .2s ease;
    }
    
    /* FIXED: Added the missing active state */
    .switch.active>span{
      transform:translateX(16px);
    }

    .meta{font-size:.9rem; color:#cfcfcf}

    /* Actions row */
    .actions{
      margin-top:14px;
      display:flex;
      gap:10px;
      flex-wrap:wrap;
    }

    /* Strength bar */
    .strength{
      height:8px; background:#141414; border-radius:999px; overflow:hidden; border:1px solid #1c1c1c; margin-top:8px;
    }
    #strengthBar{
      display:block; height:100%; width:0%;
      background:linear-gradient(90deg,#b91c1c,#e11d48);
      transition:width .25s ease;
    }

    /* Mobile-first sizes already set; small tweaks on larger screens */
    @media (min-width:480px){
      .panel{padding:22px}
    }
    @media (min-width:768px){
      .panel{max-width:460px}
    }

    /* FIXED: Enhanced light theme */
    body.light{
      --bg:#f8fafc;
      --panel:#ffffff;
      --panel-2:#ffffff;
      --text:#0f172a;
      --muted:#475569;
      --ring:rgba(225,29,72,.18);
      background:var(--bg);
      color:var(--text);
    }
    
    body.light .panel{
      background:linear-gradient(180deg,var(--panel),var(--panel-2));
      border-color:#e2e8f0;
      box-shadow:0 20px 40px rgba(0,0,0,.1);
    }
    
    body.light .input{
      background:#f1f5f9;
      border-color:#e2e8f0;
    }
    
    body.light .btn{
      background:#f8fafc;
      border-color:#e2e8f0;
      color:var(--text);
    }
    
    body.light .btn-ghost{
      background:transparent;
      border-color:#cbd5e1;
      color:var(--text);
    }
    
    body.light .btn-pill{
      background:#f1f5f9;
      border-color:#e2e8f0;
      color:var(--text);
    }
    
    body.light .strength{
      background:#e2e8f0;
      border-color:#cbd5e1;
    }
    
    body.light .switch{
      background:#e2e8f0;
      border-color:#cbd5e1;
    }
    
    body.light .switch>span{
      background:#64748b;
    }
    
    body.light .brand-red{
      color:#be123c;
    }
    
    body.light .meta{
      color:#64748b;
    }
  </style>
</head>
<body>
  <div class="wrapper">
    <section class="panel" role="main" aria-labelledby="titlePrefix">
      <header class="panel__header">
        <h1 class="brand">
          <span id="titlePrefix">Login for</span>
          <span class="brand-red">Redfolio</span>
        </h1>

        <!-- Language toggle (works on click) -->
        <button type="button" id="toggleLang" class="btn btn-pill" aria-label="Switch language">
          ES
        </button>
      </header>

      <p class="sub" id="quote">Log In to view your page</p>

      <form id="LoginForm" action="/auth/login" method="post" novalidate>
        <div class="row full">
          <label for="username" id="usernameLabel">Username</label>
          <div class="input">
            <input type="text" id="username" name="username"
                   autocomplete="username" required minlength="3"
                   placeholder="@alisha.trades" />
          </div>
        </div>

        <div class="row full">
          <label for="password" id="passwordLabel">Password</label>
          <div class="input input--pw">
            <input type="password" id="password" name="password"
                   autocomplete="current-password" required minlength="8"
                   placeholder="••••••••" />
            <button type="button" class="btn btn-ghost" id="togglePwd" aria-label="Show password">Show</button>
          </div>

          <div class="password-tools full">
            <div class="strength" aria-hidden="true"><span id="strengthBar"></span></div>
          </div>
        </div>

        <div class="actions full">
          <button class="btn btn-primary" type="submit" id="loginBtn">Log In</button>

          <!-- optional theme switch (kept, defaults to dark) -->
          <button class="btn btn-ghost" type="button" id="toggleTheme">
            <span class="switch" id="themeSwitch" aria-hidden="true"><span></span></span>
            &nbsp;<span class="meta" id="themeToggleText">Toggle light / dark</span>
          </button>
        </div>
      </form>
    </section>
  </div>

  <script>
    console.log("Login script starting...");

    // Language system
    const LANG_KEY = 'redfolio-lang';
    const defaultLang = 'en';
    let currentLang = localStorage.getItem(LANG_KEY) || defaultLang;

    const translations = {
      en: {
        titlePrefix: "Login for",
        quote: "Log In to view your page",
        usernameLabel: "Username",
        passwordLabel: "Password",
        loginBtn: "Log In",
        themeToggleText: "Toggle light / dark",
        show: "Show",
        hide: "Hide",
        langBtn: "ES"
      },
      es: {
        titlePrefix: "Acceso para",
        quote: "Inicia sesión para ver tu página",
        usernameLabel: "Usuario",
        passwordLabel: "Contraseña",
        loginBtn: "Iniciar Sesión",
        themeToggleText: "Alternar claro / oscuro",
        show: "Mostrar",
        hide: "Ocultar",
        langBtn: "EN"
      }
    };

    // Theme system
    const THEME_KEY = 'redfolio-theme';
    const body = document.body;
    const saved = localStorage.getItem(THEME_KEY);
    if (saved === 'light') body.classList.add('light');

    function applyTranslations() {
      console.log("Applying translations for:", currentLang);
      
      const lang = translations[currentLang];
      
      // Update all text elements
      document.getElementById('titlePrefix').textContent = lang.titlePrefix;
      document.getElementById('quote').textContent = lang.quote;
      document.getElementById('usernameLabel').textContent = lang.usernameLabel;
      document.getElementById('passwordLabel').textContent = lang.passwordLabel;
      document.getElementById('loginBtn').textContent = lang.loginBtn;
      document.getElementById('themeToggleText').textContent = lang.themeToggleText;
      document.getElementById('toggleLang').textContent = lang.langBtn;
      
      // Update password toggle button
      const pwd = document.getElementById('password');
      const toggle = document.getElementById('togglePwd');
      if (pwd && toggle) {
        const isPasswordVisible = pwd.getAttribute('type') === 'text';
        toggle.textContent = isPasswordVisible ? lang.hide : lang.show;
      }
    }

    function switchLanguage() {
      console.log("Switching language from", currentLang);
      currentLang = currentLang === 'en' ? 'es' : 'en';
      localStorage.setItem(LANG_KEY, currentLang);
      applyTranslations();
      console.log("Language switched to", currentLang);
    }

    // Initialize everything when DOM loads
    document.addEventListener('DOMContentLoaded', () => {
      console.log("DOM loaded, setting up functionality");

      // Apply initial translations
      applyTranslations();

      // Language toggle
      const langToggle = document.getElementById('toggleLang');
      if (langToggle) {
        langToggle.addEventListener('click', switchLanguage);
        console.log("Language toggle set up");
      }

      // Theme toggle
      const themeToggle = document.getElementById('toggleTheme');
      const themeSwitch = document.getElementById('themeSwitch');
      
      if (themeToggle && themeSwitch) {
        const updateSwitch = () => {
          themeSwitch.classList.toggle('active', body.classList.contains('light'));
        };
        
        updateSwitch(); // Set initial state
        
        themeToggle.addEventListener('click', () => {
          body.classList.toggle('light');
          localStorage.setItem(THEME_KEY, body.classList.contains('light') ? 'light' : 'dark');
          updateSwitch();
          console.log("Theme toggled to", body.classList.contains('light') ? 'light' : 'dark');
        });
        console.log("Theme toggle set up");
      }

      // Password toggle
      const pwd = document.getElementById('password');
      const pwdToggle = document.getElementById('togglePwd');
      
      if (pwd && pwdToggle) {
        pwdToggle.addEventListener('click', () => {
          const isPw = pwd.getAttribute('type') === 'password';
          pwd.setAttribute('type', isPw ? 'text' : 'password');
          pwdToggle.textContent = isPw ? translations[currentLang].hide : translations[currentLang].show;
          pwd.focus();
        });
        console.log("Password toggle set up");
      }

      console.log("All functionality initialized");
    });
  </script>
</body>
</html>